buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("net.serenity-bdd:serenity-gradle-plugin:2.4.34")
  }
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.springframework.boot' version '2.4.12'
  id 'org.owasp.dependencycheck' version '6.1.6'
  id 'com.github.ben-manes.versions' version '0.38.0'
  id 'org.sonarqube' version '3.2.0'
  id 'info.solidsoft.pitest' version '1.5.2'
  id 'io.freefair.lombok' version '5.3.0'
  // If Pact version is changed, make sure serenity report works.
  id 'au.com.dius.pact' version '4.1.8'
  id 'org.flywaydb.flyway' version '6.5.7'
}

apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'idea'

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

allprojects {
  sourceCompatibility = '11'
  targetCompatibility = '11'
}

lombok {
  config['config.stopBubbling'] = 'true'
  config['lombok.addLombokGeneratedAnnotation'] = 'true'
  config['lombok.anyConstructor.addConstructorProperties'] = 'true'
}

sourceSets {

  testUtils {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/testUtils/java')
    }
    resources.srcDir file('src/testUtils/resources')
  }

  functionalTest {
    java {
      compileClasspath += testUtils.output
      runtimeClasspath += testUtils.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += testUtils.output
      runtimeClasspath += testUtils.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }

  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contractTest/resources')
  }

}
tasks.withType(Copy) {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task functional(type: Test) {
  maxParallelForks = (System.getenv('MAX_FT_TESTS_PARALLEL_FORKS') ? System.getenv('MAX_FT_TESTS_PARALLEL_FORKS') : 1) as int
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath

}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

project.ext {
  pacticipant = 'wa_task_management_api'
  pacticipantVersion = getCheckedOutGitCommitHash()
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.29'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.18.0"
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      excludes = ["com.gargoylesoftware.htmlunit.javascript.host.css.StyleAttributes"]
    }
  }
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

pitest {
  junit5PluginVersion = '0.12'
  targetClasses = ['uk.gov.hmcts.reform.wataskmanagementapi.*']
  excludedClasses = [
    'uk.gov.hmcts.reform.wataskmanagementapi.taskconfiguration.config.*',
    'uk.gov.hmcts.reform.wataskmanagementapi.config.*',
    'uk.gov.hmcts.reform.wataskmanagementapi.Application'
  ]
  threads = 10
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  mutationThreshold = 80
}

task tests {
  description = "Runs junit , integration and functional tests"
  dependsOn test, integration, functional
}

project.tasks['pitest'].group = "Verification"

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport


// Ensures that functional tests index page is generated
// Functional tests should run two tasks "functional" and "aggregate"
gradle.startParameter.continueOnFailure = true
functional.finalizedBy aggregate

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: wa-task-management-api"
    property "sonar.projectKey", "uk.gov.hmcts.reform:wa-task-management-api"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    property "sonar.exclusions", "src/main/java/uk/gov/hmcts/reform/wataskmanagementapi/config/**," +
      "src/main/java/uk/gov/hmcts/reform/wataskmanagementapi/Application.java," +
      "src/testUtils/java/uk/gov/hmcts/reform/wataskmanagementapi/**," +
      "src/main/java/uk/gov/hmcts/reform/wataskmanagementapi/clients/**," +
      "src/main/java/uk/gov/hmcts/reform/wataskmanagementapi/domain/entities/search/parameter/**"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

dependencyManagement {
  dependencies {
    dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.68'
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '30.1-jre') {
      entry 'guava'
    }
    //
    dependency group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
    dependency group: 'commons-io', name: 'commons-io', version: '2.8.0'

    //CVE-2021-27568
    dependency group: 'net.minidev', name: 'json-smart', version: '2.4.7'

    //CVE-2021-28170
    dependency group: 'org.glassfish', name: 'jakarta.el', version: '4.0.1'

    //CVE-2020-23171
    dependency group: 'com.nimbusds', name: 'lang-tag', version: '1.5'
  }
}

repositories {
  mavenLocal()
  maven { url 'https://jitpack.io' }
  mavenCentral()
}

def versions = [
  junit           : '5.7.2',
  junitPlatform   : '1.7.2',
  reformLogging   : '6.0.0',
  springfoxSwagger: '3.0.0',
  serenity        : '2.2.12',
  gradlePitest    : '1.5.1',
  pitest          : '1.5.2',
  sonarPitest     : '0.5',
  pactVersion     : '4.3.4',
  logbook         : '2.6.2'
]

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache'

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server'

  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '3.0.3'

  implementation group: 'io.springfox', name: 'springfox-boot-starter', version: versions.springfoxSwagger
  implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger

  implementation group: 'org.zalando', name: 'logbook-spring-boot-starter', version: versions.logbook
  implementation 'org.zalando:problem-spring-web-starter:0.26.2'

  implementation group: 'net.minidev', name: 'json-smart', version: '2.4.7'

  implementation group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '5.2.2'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: versions.reformLogging

  implementation group: 'org.hibernate', name: 'hibernate-core', version: '5.4.27.Final'
  implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.2.0.Final'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.1'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.17.1'

  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.58'
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: '9.0.58'

  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '3.1.2'
  implementation group: 'com.github.hmcts', name: 'core-case-data-store-client', version: '4.7.5'

  implementation group: 'com.auth0', name: 'java-jwt', version: '3.11.0'

  implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-paranamer', version: '2.12.0'

  implementation group: 'org.flywaydb', name: 'flyway-core', version: '6.5.7'
  implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.22'
  // required to convert postgres to hibernate types
  implementation group: 'com.vladmihalcea', name: 'hibernate-types-55', version: '2.12.0'

  //cache
  implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '3.0.4'

  testImplementation group: 'org.testcontainers', name: 'postgresql', version: '1.15.3'
  testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: '1.15.3'
  testImplementation group: 'com.h2database', name: 'h2', version: '1.4.197'

  testImplementation libraries.junit5
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  testImplementation(group: 'com.github.tomakehurst', name: 'wiremock-jre8', version: '2.27.2') {
    exclude group: 'com.github.jknack.handlebars.java'
  }

  testImplementation group: 'com.github.hmcts', name: 'document-management-client', version: '7.0.0'

  testImplementation group: 'org.pitest', name: 'pitest', version: versions.pitest
  testImplementation 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.5.2'
  testImplementation 'org.codehaus.sonar-plugins:sonar-pitest-plugin:0.5'

  testImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
  testImplementation "org.junit.vintage:junit-vintage-engine:${versions.junit}"

  testImplementation group: 'pl.pojo', name: 'pojo-tester', version: '0.7.6'
  testImplementation 'com.github.hmcts:fortify-client:1.2.1:all'
  testImplementation 'com.google.guava:guava-testlib:31.0-jre'
  //Pact contract testing
  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pactVersion
  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit', version: versions.pactVersion

  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5', version: versions.pactVersion
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'spring', version: versions.pactVersion
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5spring', version: versions.pactVersion

  contractTestRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.7.2')
  contractTestImplementation('org.junit.jupiter:junit-jupiter-api:5.7.2')

  testUtilsImplementation sourceSets.main.runtimeClasspath
  testUtilsImplementation sourceSets.test.runtimeClasspath

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath

  contractTestImplementation sourceSets.main.runtimeClasspath
  contractTestImplementation sourceSets.test.runtimeClasspath
}

task runAndPublishConsumerPactTests(type: Test) {
  logger.lifecycle("Runs pact Tests")
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

runAndPublishConsumerPactTests.finalizedBy pactPublish

pact {
  broker {
    pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
  }
  publish {
    pactDirectory = 'pacts'
    tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
    version = project.pacticipantVersion
  }
}

task contract(type: Test) {
  description = "Runs the consumer Pact tests"
  group = 'Verification'
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

task runProviderPactVerification(type: Test) {
  logger.lifecycle("Runs provider pact Tests")
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  systemProperty 'pact.verifier.publishResults', System.getProperty('pact.verifier.publishResults')
  systemProperty 'pact.provider.version', project.pacticipantVersion
}

//task fortifyScan(type: JavaExec)  {
//  main = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
//  classpath += sourceSets.test.runtimeClasspath
//  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
//}

runProviderPactVerification.dependsOn contract

runProviderPactVerification.finalizedBy pactVerify

static def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}

mainClassName = 'uk.gov.hmcts.reform.wataskmanagementapi.Application'

bootJar {
  getArchiveFileName().set(provider {
    'wa-task-management-api.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}
