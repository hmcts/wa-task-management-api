buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath("net.serenity-bdd:serenity-gradle-plugin:2.3.5")
  }
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.10.RELEASE'
  id 'org.springframework.boot' version '2.3.4.RELEASE'
  id 'org.owasp.dependencycheck' version '6.0.2'
  id 'com.github.ben-manes.versions' version '0.36.0'
  id 'org.sonarqube' version '3.0'
  id 'info.solidsoft.pitest' version '1.5.2'
  id 'uk.gov.hmcts.java' version '0.12.5'
  id 'io.freefair.lombok' version '5.3.0'
}

apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'idea'

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

allprojects {
  sourceCompatibility = '11'
  targetCompatibility = '11'
}

lombok {
  config['config.stopBubbling'] = 'true'
  config['lombok.addLombokGeneratedAnnotation'] = 'true'
  config['lombok.anyConstructor.addConstructorProperties'] = 'true'
}

sourceSets {

  testUtils {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/testUtils/java')
    }
    resources.srcDir file('src/testUtils/resources')
  }

  functionalTest {
    java {
      compileClasspath += testUtils.output
      runtimeClasspath += testUtils.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += testUtils.output
      runtimeClasspath += testUtils.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.29'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.18.0"
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      excludes = ["com.gargoylesoftware.htmlunit.javascript.host.css.StyleAttributes"]
    }
  }
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

pitest {
  junit5PluginVersion = '0.12'
  targetClasses = ['uk.gov.hmcts.reform.wataskmanagementapi.*']
  excludedClasses = [
    'uk.gov.hmcts.reform.wataskmanagementapi.config.*',
    'uk.gov.hmcts.reform.wataskmanagementapi.Application'
  ]
  threads = 10
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  mutationThreshold = 80
}

task tests {
  description = "Runs junit , integration and functional tests"
  dependsOn test, integration, functional
}

project.tasks['pitest'].group = "Verification"

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport


// Ensures that functional tests index page is generated
// Functional tests should run two tasks "functional" and "aggregate"
gradle.startParameter.continueOnFailure = true
functional.finalizedBy aggregate

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: wa-task-management-api"
    property "sonar.projectKey", "uk.gov.hmcts.reform:wa-task-management-api"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    property "sonar.exclusions", "src/main/java/uk/gov/hmcts/reform/wataskmanagementapi/config/**," +
                                 "src/main/java/uk/gov/hmcts/reform/wataskmanagementapi/Application.java" +
                                 "src/testUtils/java/uk/gov/hmcts/reform/wataskmanagementapi/**," +
                                 "src/main/java/uk/gov/hmcts/reform/wataskmanagementapi/clients/**"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

dependencyManagement {
  dependencies {
    dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.68'
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '30.1-jre') {
      entry 'guava'
    }
    //
    dependency group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
  }
}

repositories {
  mavenLocal()
  jcenter()
  mavenCentral()
}

def versions = [
  junit           : '5.7.0',
  junitPlatform   : '1.7.0',
  reformLogging   : '5.1.5',
  springBoot      : '2.4.2',
  springfoxSwagger: '2.9.2',
  serenity        : '2.2.12',
  gradlePitest    : '1.5.1',
  pitest          : '1.5.2',
  sonarPitest     : '0.5',
]

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBoot
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: versions.springBoot
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server', version: versions.springBoot


  implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
  compile group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger
  compile group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '5.2.2'

  implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformLogging
  implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.5.RELEASE'
  implementation group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.1.0'

  compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.3'
  compile group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.13.3'

  compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.43'
  compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: '9.0.43'

  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '2.2.5.RELEASE'

  compile group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '3.1.2'

  compile group: 'uk.gov.hmcts.reform', name: 'core-case-data-store-client', version: '4.7.5'

  compile group: 'com.auth0', name: 'java-jwt', version: '3.11.0'

  compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-paranamer', version: '2.12.0'

  testImplementation libraries.junit5
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  testCompile group: 'org.pitest', name: 'pitest', version: versions.pitest
  testCompile 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.5.2'
  testCompile 'org.codehaus.sonar-plugins:sonar-pitest-plugin:0.5'

  testCompile group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
  testCompile group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  testCompile group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
  testCompile group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
  testCompile "org.junit.vintage:junit-vintage-engine:${versions.junit}"

  testCompile group: 'pl.pojo', name: 'pojo-tester', version: '0.7.6'
  testCompile group: 'com.google.guava', name: 'guava-testlib', version: '30.1-jre'
  testCompile group: 'com.jparams', name: 'to-string-verifier', version: '1.4.8'

  testUtilsImplementation sourceSets.main.runtimeClasspath
  testUtilsImplementation sourceSets.test.runtimeClasspath

  testUtilsImplementation sourceSets.main.runtimeClasspath
  testUtilsImplementation sourceSets.test.runtimeClasspath

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath

}

mainClassName = 'uk.gov.hmcts.reform.wataskmanagementapi.Application'

bootJar {
  getArchiveFileName().set(provider {
    'wa-task-management-api.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}
