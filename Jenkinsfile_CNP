#!groovy

@Library("Infrastructure")

def type = "java"
def product = "wa"
def component = "task-management-api"


def secrets = [
    'wa-${env}' : [
        secret('idam-redirect-uri', 'IA_IDAM_REDIRECT_URI'),
        secret('idam-secret', 'IA_IDAM_SECRET'),
        secret('wa-idam-client-secret', 'WA_IDAM_CLIENT_SECRET'),
        secret('wa-test-law-firm-a-username', 'TEST_WA_LAW_FIRM_USERNAME'),
        secret('wa-test-law-firm-a-password', 'TEST_WA_LAW_FIRM_PASSWORD'),
        secret('wa-test-caseofficer-a-username', 'TEST_WA_CASEOFFICER_A_USERNAME'),
        secret('wa-test-caseofficer-a-password', 'TEST_WA_CASEOFFICER_A_PASSWORD'),
        secret('wa-test-caseofficer-b-username', 'TEST_WA_CASEOFFICER_B_USERNAME'),
        secret('wa-test-caseofficer-b-password', 'TEST_WA_CASEOFFICER_B_PASSWORD'),
    ],
    's2s-${env}': [
        secret('microservicekey-wa-task-management-api', 'S2S_SECRET_TASK_MANAGEMENT_API'),
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

withPipeline(type, product, component) {
    disableLegacyDeployment()
    loadVaultSecrets(secrets)

    env.IDAM_URL = "https://idam-api.aat.platform.hmcts.net"
    env.S2S_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.CAMUNDA_URL = "http://camunda-api-aat.service.core-compute-aat.internal/engine-rest"
    env.OPEN_ID_IDAM_URL = "https://idam-web-public.aat.platform.hmcts.net"
    env.CCD_URL = "http://ccd-data-store-api-aat.service.core-compute-aat.internal"
    env.ROLE_ASSIGNMENT_URL = "http://am-role-assignment-service-aat.service.core-compute-aat.internal"

    after('test') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/**/*'
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/integration/**/*'
    }

    after('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/functional/**/*'
    }

    after('functionalTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/functional/**/*'
    }
}
