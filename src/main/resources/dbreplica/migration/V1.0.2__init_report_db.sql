DROP TABLE IF EXISTS "cft_task_db"."tasks" CASCADE;
CREATE TABLE "cft_task_db"."tasks"
(
  "task_id" Text NOT NULL,
  "task_name" Text,
  "task_type" Text,
  "due_date_time" Timestamp Without Time Zone NOT NULL,
  "state" Text,
  "task_system" Text,
  "security_classification" Text,
  "title" Text,
  "description" Text,
  "notes" JSONB,
  "major_priority" Integer DEFAULT 5000,
  "minor_priority" Integer DEFAULT 500,
  "assignee" Text,
  "auto_assigned" Boolean DEFAULT false,
  "execution_type_code" Text,
  "work_type" Text,
  "role_category" Text,
  "has_warnings" Boolean DEFAULT false,
  "assignment_expiry" Timestamp Without Time Zone,
  "case_id" Text,
  "case_type_id" Text,
  "case_category" Text,
  "case_name" Text,
  "jurisdiction" Text,
  "region" Text,
  "region_name" Text,
  "location" Text,
  "location_name" Text,
  "business_context" Text,
  "termination_reason" Text,
  "created" Timestamp Without Time Zone NOT NULL,
  "additional_properties" JSONB,
  "reconfigure_request_time" Timestamp Without Time Zone,
  "next_hearing_id" Text,
  "next_hearing_date" Timestamp Without Time Zone,
  "priority_date" Timestamp Without Time Zone NOT NULL,
  "last_reconfiguration_time" Timestamp Without Time Zone,
  "last_updated_timestamp" Timestamp Without Time Zone,
  "last_updated_user" Text,
  "last_updated_action" Text,
  "indexed" Boolean DEFAULT false,
  PRIMARY KEY ( "task_id" )
);

drop table if exists task_history cascade;
create table cft_task_db.task_history
(
  update_id               SERIAL NOT NULL,
  task_id                 TEXT,
  task_name               TEXT,
  task_type               TEXT,
  due_date_time           TIMESTAMP,
  state                   TEXT,
  task_system             TEXT,
  security_classification TEXT,
  title                   TEXT,
  major_priority          INTEGER,
  minor_priority          INTEGER,
  assignee                TEXT,
  auto_assigned           BOOLEAN,
  execution_type_code     TEXT,
  work_type               TEXT,
  role_category           TEXT,
  has_warnings            BOOLEAN,
  assignment_expiry       TIMESTAMP,
  case_id                 TEXT,
  case_type_id            TEXT,
  case_category           TEXT,
  case_name               TEXT,
  jurisdiction            TEXT,
  region                  TEXT,
  location                TEXT,
  business_context        TEXT,
  termination_reason      TEXT,
  created                 TIMESTAMP,
  updated_by              TEXT,
  updated                 TIMESTAMP,
  update_action           TEXT,
  PRIMARY KEY (update_id)
);
create index task_history_update_id_idx on cft_task_db.task_history (task_id, update_id);
create index task_history_updated_idx on cft_task_db.task_history (task_id, updated);

drop table if exists reportable_task cascade;
create table cft_task_db.reportable_task
(
    update_id               SERIAL NOT NULL,
    task_id                 TEXT NOT NULL,
    task_name               TEXT,
    task_type               TEXT,
    due_date_time           TIMESTAMP,
    state                   TEXT,
    task_system             TEXT,
    security_classification TEXT,
    title                   TEXT,
    major_priority          INTEGER,
    minor_priority          INTEGER,
    assignee                TEXT,
    auto_assigned           BOOLEAN,
    execution_type_code     TEXT,
    work_type               TEXT,
    role_category           TEXT,
    has_warnings            BOOLEAN,
    assignment_expiry       TIMESTAMP,
    case_id                 TEXT,
    case_type_id            TEXT,
    case_category           TEXT,
    case_name               TEXT,
    jurisdiction            TEXT,
    region                  TEXT,
    location                TEXT,
    business_context        TEXT,
    termination_reason      TEXT,
    created                 TIMESTAMP,
    updated_by              TEXT,
    updated                 TIMESTAMP,
    update_action           TEXT,
    created_date            DATE NOT NULL,
    final_state_label       TEXT,
    wait_time_days          INTEGER,
    handling_time_days      INTEGER,
    processing_time_days    INTEGER,
    is_within_sla           TEXT,
    due_date_to_completed_diff_days    INTEGER,
    completed_date          DATE,
    completed_date_time     TIMESTAMP,
    first_assigned_date     DATE,
    first_assigned_date_time     TIMESTAMP,
    number_of_reassignments      INTEGER DEFAULT 0 NOT NULL,
    due_date                 DATE,
    last_updated_date        DATE,
    wait_time                       INTERVAL,
    handling_time                   INTERVAL,
    processing_time                 INTERVAL,
    due_date_to_completed_diff_time INTERVAL,
    case_type_label          TEXT,
    role_category_label      TEXT,
    PRIMARY KEY ( "task_id" )
);

drop table if exists task_assignments cascade;
create table cft_task_db.task_assignments
(
    assignment_id               SERIAL NOT NULL,
    assignment_start            TIMESTAMP NOT NULL,
    assignment_end              TIMESTAMP,
    assignee                    TEXT NOT NULL,
    task_id                     TEXT NOT NULL,
    service                     TEXT NOT NULL,
    location                    TEXT NOT NULL,
    role_category               TEXT,
    task_name                   TEXT NOT NULL,
    assignment_end_reason       TEXT,
    PRIMARY KEY ( "assignment_id" )
);

DROP TABLE IF EXISTS work_types;
CREATE TABLE work_types
(
    work_type_id TEXT,
    label TEXT,
    PRIMARY KEY (work_type_id)
);
